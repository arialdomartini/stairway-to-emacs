* Package in a bottle

Many find using Emacs like this is a miserable and not very
ergonomic experience.

Improve it installing [[vertico][vertico.el]], a package that makes finding files
and running commands more convenient. Your minibuffer will look like this:

[[file:img/002/vertico.png]]


You need to open the Emacs configuration file (or /init file/).

** Find the init file
To know where it is, ask Emacs directly. Emacs is the runtime of an
interactive programming language, so it comes with variables. The
variable containing the init file path is =user-init-file=. Use
=describe-variable= to inspect it:

| Do                                             | Comment                                                |
|------------------------------------------------+--------------------------------------------------------|
| =M-x describe-variable RET user-init-file RET= | A documentation pane will appear, containing the path. |

Alternatively, evaluate the variable in the Scratch Buffer, a
disposable area free for you to use for impromptu experiments:

| Do                       | Comment                                      |
|--------------------------+----------------------------------------------|
| =M-x scratch-buffer RET= | Open the scratch buffer.                     |
| Type =user-init-file=    | Keep the cursor right after the last =e=.    |
| =M-x eval-last-sexp RET= | This EVALuates the LAST Symbolic-EXPression. |

You should get:

| Operating system | Value of =user-init-file=                                  |
|------------------+------------------------------------------------------------|
| Windows          | =c:/Users/<YOUR_ACCOUNT>/AppData/Roaming/.emacs.d/init.el= |
| Linux and macOS  | =~/.config/emacs.d/init.el= or =~/.emacs.d/init.el=        |

It is possible that your Emacs is using a file from a legacy path
(=~/.emacs.el= or =~/.emacs=). If so, I suggest you to delete that
file and to create an empty file either in the XDG-compliant location
(=~/.config/emacs.d/init.el=) or in =~/.emacs.d/init.el=


** Enable verticol.el
Edit this file (feel free to use your preferred editor!) and write:

#+begin_src elisp
(require 'package)
(package-initialize)

(use-package vertico
  :ensure t
  :config
  (vertico-mode))
#+end_src


Given that an expression like =(f a b)= in Emacs is equivalent to
JavaScript's =f(a, b)=, here's an explanation of your first =init.el=
script:

| Expression             | Meaning                                                                                                                                                                                                                 |
|------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =(require 'package)=   | This is equivalent to JS' =require= or Python's / Java's =import=. =package= is the Emacs' built-in package manager. The ='= before =package= means "consider the word 'package' literally: it is not a variable name."      |
| =(package-initialize)= | Initialize the package manager.                                                                                                                                                                                         |
| =(use-package vertico= | Load the package =vertico=                                                                                                                                                                                              |
| =ensure t=             | downloading it from the internet, if not present.                                                                                                                                                                       |
| =:config=              | and when it's ready...                                                                                                                                                                                                  |
| =(vertico-mode))=      | activate it!                                                                                                                                                                                                            |

Save the file, close Emacs (=M-x save-buffers-kill-terminal RET=) and
reopen it. If you felt so brave to edit this file directly with Emacs,
you don't need to quit it: just run =M-x eval-buffer= to execute
your init file in place.

(I intentionnally said *execute*: indeed, =init.el= is not a
/configuration file/, but the source code of a program you write,
which is compiled to native code and run.)

** Try [[vertico][vertico.el]]
Try again with =M-x find-file=. Cool! Now there is a real-time list of
command candidates while you type. And when you hit =RET=, a
real-time, searchable list of files.

Notice that the list of candidates also suggests their key
bindings. The one for =find-file= is =C-x C-f=. Good to know. (Hey! Be
aware that =C-x f= and =C-x C-f= are 2 distinct key bindings!)

Notice the last line of your =init.el= file:

#+begin_src elisp
(vertico-mode)
#+end_src elisp

Remember that =(f a b)= is the equivalent of other languages' =f(a,
b)=: so, =(vertico-mode)= means you are invoking the function
=vertico-mode=. You can also run is with =M-x=: it will enable
and disable =vertico.el=.

[[vertico][vertico.el]] does much more than what you just saw.\\
Eventually, as you install a package, you will like to find out all of
its functionalities reading its documentation. But take your time:
you just started the journey and Emacs is going to accompany you
forever.

** What the hell, Emacs! Hands off my init file!
Reopening your init file, you may find out that there are some lines
you never typed. Emacs has the horrible habit of storing customization
info there.

Delete them. Then instruct Emacs to stop doing that again, adding the
following line at the very beginning:

#+begin_src elisp
(setq custom-file (make-temp-file "emacs-custom-"))
#+end_src elisp

It basically says: Emacs, for customization info you want to write
down, use a file named after =emacs-custom-= prefix, and located in a
temporary folder. Leave in full control of my own init file. Thank
you.

#+LINK: vertico https://github.com/minad/vertico
